/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IMarketCommission {
  export type CommissionStruct = {
    owner: PromiseOrValue<string>;
    ratio: PromiseOrValue<BigNumberish>;
  };

  export type CommissionStructOutput = [string, BigNumber] & {
    owner: string;
    ratio: BigNumber;
  };

  export type CommissionSchemaStruct = {
    others: IMarketCommission.CommissionStruct[];
    axieInfinityRatio: PromiseOrValue<BigNumberish>;
    skyMavisRatio: PromiseOrValue<BigNumberish>;
    roninRatio: PromiseOrValue<BigNumberish>;
    sumRatios: PromiseOrValue<BigNumberish>;
  };

  export type CommissionSchemaStructOutput = [
    IMarketCommission.CommissionStructOutput[],
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    others: IMarketCommission.CommissionStructOutput[];
    axieInfinityRatio: BigNumber;
    skyMavisRatio: BigNumber;
    roninRatio: BigNumber;
    sumRatios: BigNumber;
  };

  export type AllocationStruct = {
    allocType: PromiseOrValue<BigNumberish>;
    recipient: PromiseOrValue<string>;
    owner: PromiseOrValue<string>;
    ratio: PromiseOrValue<BigNumberish>;
    value: PromiseOrValue<BigNumberish>;
  };

  export type AllocationStructOutput = [
    number,
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    allocType: number;
    recipient: string;
    owner: string;
    ratio: BigNumber;
    value: BigNumber;
  };
}

export interface MarketCommissionInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "MARKET_CONTRACT_ROLE()": FunctionFragment;
    "MAX_PERCENTAGE()": FunctionFragment;
    "OPERATOR_ROLE()": FunctionFragment;
    "WRON()": FunctionFragment;
    "claimPendingReserve(address)": FunctionFragment;
    "claimPendingReserveFor(address,address)": FunctionFragment;
    "clearCutPercentages(address[])": FunctionFragment;
    "cutPercentage(address)": FunctionFragment;
    "getAllocations(address,address,uint256,address,address,bool,bool)": FunctionFragment;
    "getCommissionSchema(address,address)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "getTreasuryAddresses()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address,address,address,address,address[],address[])": FunctionFragment;
    "pendingReserve(address,address)": FunctionFragment;
    "recordRONIncreased(address)": FunctionFragment;
    "recordReserveIncreased(address,address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setCommissionSchema(address,address,uint256,uint256,uint256,(address,uint256)[])": FunctionFragment;
    "setCutPercentages(address[],uint256[])": FunctionFragment;
    "setTreasuryAddresses(address,address,address)": FunctionFragment;
    "setWRONConfig(address,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "totalReserve(address)": FunctionFragment;
    "userReserve(address,address)": FunctionFragment;
    "wronHelper()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "MARKET_CONTRACT_ROLE"
      | "MAX_PERCENTAGE"
      | "OPERATOR_ROLE"
      | "WRON"
      | "claimPendingReserve"
      | "claimPendingReserveFor"
      | "clearCutPercentages"
      | "cutPercentage"
      | "getAllocations"
      | "getCommissionSchema"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "getTreasuryAddresses"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "pendingReserve"
      | "recordRONIncreased"
      | "recordReserveIncreased"
      | "renounceRole"
      | "revokeRole"
      | "setCommissionSchema"
      | "setCutPercentages"
      | "setTreasuryAddresses"
      | "setWRONConfig"
      | "supportsInterface"
      | "totalReserve"
      | "userReserve"
      | "wronHelper"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MARKET_CONTRACT_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WRON", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimPendingReserve",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPendingReserveFor",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "clearCutPercentages",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cutPercentage",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllocations",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCommissionSchema",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasuryAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingReserve",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "recordRONIncreased",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "recordReserveIncreased",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCommissionSchema",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      IMarketCommission.CommissionStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setCutPercentages",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryAddresses",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setWRONConfig",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalReserve",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userReserve",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "wronHelper",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MARKET_CONTRACT_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WRON", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimPendingReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimPendingReserveFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearCutPercentages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cutPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllocations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCommissionSchema",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasuryAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordRONIncreased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordReserveIncreased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCommissionSchema",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCutPercentages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWRONConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wronHelper", data: BytesLike): Result;

  events: {
    "CommissionSchemaUpdated(address,address,tuple)": EventFragment;
    "CutPercentagesUpdated(address[],uint256[])": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MarketTreasuryAddressesUpdated(address,address,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "TotalReserveSynced(address,uint256,uint256)": EventFragment;
    "UserReserveClaimed(address,address,uint256)": EventFragment;
    "UserReserveUpdated(address,address,uint256)": EventFragment;
    "WRONConfigUpdated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CommissionSchemaUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CutPercentagesUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MarketTreasuryAddressesUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TotalReserveSynced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserReserveClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserReserveUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WRONConfigUpdated"): EventFragment;
}

export interface CommissionSchemaUpdatedEventObject {
  marketContract: string;
  token: string;
  schema: IMarketCommission.CommissionSchemaStructOutput;
}
export type CommissionSchemaUpdatedEvent = TypedEvent<
  [string, string, IMarketCommission.CommissionSchemaStructOutput],
  CommissionSchemaUpdatedEventObject
>;

export type CommissionSchemaUpdatedEventFilter =
  TypedEventFilter<CommissionSchemaUpdatedEvent>;

export interface CutPercentagesUpdatedEventObject {
  addresses: string[];
  percentages: BigNumber[];
}
export type CutPercentagesUpdatedEvent = TypedEvent<
  [string[], BigNumber[]],
  CutPercentagesUpdatedEventObject
>;

export type CutPercentagesUpdatedEventFilter =
  TypedEventFilter<CutPercentagesUpdatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MarketTreasuryAddressesUpdatedEventObject {
  skyMavisTreasury: string;
  axieInfinityTreasury: string;
  roninNetworkTreasury: string;
}
export type MarketTreasuryAddressesUpdatedEvent = TypedEvent<
  [string, string, string],
  MarketTreasuryAddressesUpdatedEventObject
>;

export type MarketTreasuryAddressesUpdatedEventFilter =
  TypedEventFilter<MarketTreasuryAddressesUpdatedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface TotalReserveSyncedEventObject {
  token: string;
  oldReserve: BigNumber;
  newReserve: BigNumber;
}
export type TotalReserveSyncedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  TotalReserveSyncedEventObject
>;

export type TotalReserveSyncedEventFilter =
  TypedEventFilter<TotalReserveSyncedEvent>;

export interface UserReserveClaimedEventObject {
  addr: string;
  token: string;
  amount: BigNumber;
}
export type UserReserveClaimedEvent = TypedEvent<
  [string, string, BigNumber],
  UserReserveClaimedEventObject
>;

export type UserReserveClaimedEventFilter =
  TypedEventFilter<UserReserveClaimedEvent>;

export interface UserReserveUpdatedEventObject {
  addr: string;
  token: string;
  amount: BigNumber;
}
export type UserReserveUpdatedEvent = TypedEvent<
  [string, string, BigNumber],
  UserReserveUpdatedEventObject
>;

export type UserReserveUpdatedEventFilter =
  TypedEventFilter<UserReserveUpdatedEvent>;

export interface WRONConfigUpdatedEventObject {
  arg0: string;
  arg1: string;
}
export type WRONConfigUpdatedEvent = TypedEvent<
  [string, string],
  WRONConfigUpdatedEventObject
>;

export type WRONConfigUpdatedEventFilter =
  TypedEventFilter<WRONConfigUpdatedEvent>;

export interface MarketCommission extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketCommissionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MARKET_CONTRACT_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MAX_PERCENTAGE(overrides?: CallOverrides): Promise<[BigNumber]>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    WRON(overrides?: CallOverrides): Promise<[string]>;

    claimPendingReserve(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimPendingReserveFor(
      _addr: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    clearCutPercentages(
      _addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cutPercentage(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAllocations(
      _marketContract: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _total: PromiseOrValue<BigNumberish>,
      _seller: PromiseOrValue<string>,
      _referralAddr: PromiseOrValue<string>,
      _autoTransferReferralReward: PromiseOrValue<boolean>,
      _referralFeature: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [IMarketCommission.AllocationStructOutput[]] & {
        _allocs: IMarketCommission.AllocationStructOutput[];
      }
    >;

    getCommissionSchema(
      _marketContract: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IMarketCommission.CommissionSchemaStructOutput]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTreasuryAddresses(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        _skyMavisTreasuryAddr: string;
        _axieInfinityTreasuryAddr: string;
        _roninNetworkTreasuryAddr: string;
      }
    >;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _wron: PromiseOrValue<string>,
      _wronHelper: PromiseOrValue<string>,
      _skyMavisTreasuryAddr: PromiseOrValue<string>,
      _axieInfinityTreasuryAddr: PromiseOrValue<string>,
      _roninNetworkTreasuryAddr: PromiseOrValue<string>,
      _markets: PromiseOrValue<string>[],
      _operators: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pendingReserve(
      _addr: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _amount: BigNumber }>;

    recordRONIncreased(
      _addr: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    recordReserveIncreased(
      _addr: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCommissionSchema(
      _marketContract: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _skyMavisRatio: PromiseOrValue<BigNumberish>,
      _axieInfinityRatio: PromiseOrValue<BigNumberish>,
      _roninRatio: PromiseOrValue<BigNumberish>,
      _otherCommissions: IMarketCommission.CommissionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCutPercentages(
      _addresses: PromiseOrValue<string>[],
      _percentages: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTreasuryAddresses(
      _skyMavisTreasuryAddr: PromiseOrValue<string>,
      _axieInfinityTreasuryAddr: PromiseOrValue<string>,
      _roninNetworkTreasuryAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWRONConfig(
      _wron: PromiseOrValue<string>,
      _wronHelper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalReserve(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userReserve(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    wronHelper(overrides?: CallOverrides): Promise<[string]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  MARKET_CONTRACT_ROLE(overrides?: CallOverrides): Promise<string>;

  MAX_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

  OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  WRON(overrides?: CallOverrides): Promise<string>;

  claimPendingReserve(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimPendingReserveFor(
    _addr: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  clearCutPercentages(
    _addresses: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cutPercentage(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAllocations(
    _marketContract: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _total: PromiseOrValue<BigNumberish>,
    _seller: PromiseOrValue<string>,
    _referralAddr: PromiseOrValue<string>,
    _autoTransferReferralReward: PromiseOrValue<boolean>,
    _referralFeature: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<IMarketCommission.AllocationStructOutput[]>;

  getCommissionSchema(
    _marketContract: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IMarketCommission.CommissionSchemaStructOutput>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: PromiseOrValue<BytesLike>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTreasuryAddresses(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      _skyMavisTreasuryAddr: string;
      _axieInfinityTreasuryAddr: string;
      _roninNetworkTreasuryAddr: string;
    }
  >;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _wron: PromiseOrValue<string>,
    _wronHelper: PromiseOrValue<string>,
    _skyMavisTreasuryAddr: PromiseOrValue<string>,
    _axieInfinityTreasuryAddr: PromiseOrValue<string>,
    _roninNetworkTreasuryAddr: PromiseOrValue<string>,
    _markets: PromiseOrValue<string>[],
    _operators: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pendingReserve(
    _addr: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  recordRONIncreased(
    _addr: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  recordReserveIncreased(
    _addr: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCommissionSchema(
    _marketContract: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _skyMavisRatio: PromiseOrValue<BigNumberish>,
    _axieInfinityRatio: PromiseOrValue<BigNumberish>,
    _roninRatio: PromiseOrValue<BigNumberish>,
    _otherCommissions: IMarketCommission.CommissionStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCutPercentages(
    _addresses: PromiseOrValue<string>[],
    _percentages: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTreasuryAddresses(
    _skyMavisTreasuryAddr: PromiseOrValue<string>,
    _axieInfinityTreasuryAddr: PromiseOrValue<string>,
    _roninNetworkTreasuryAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWRONConfig(
    _wron: PromiseOrValue<string>,
    _wronHelper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalReserve(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userReserve(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  wronHelper(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    MARKET_CONTRACT_ROLE(overrides?: CallOverrides): Promise<string>;

    MAX_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    WRON(overrides?: CallOverrides): Promise<string>;

    claimPendingReserve(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimPendingReserveFor(
      _addr: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clearCutPercentages(
      _addresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    cutPercentage(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllocations(
      _marketContract: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _total: PromiseOrValue<BigNumberish>,
      _seller: PromiseOrValue<string>,
      _referralAddr: PromiseOrValue<string>,
      _autoTransferReferralReward: PromiseOrValue<boolean>,
      _referralFeature: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<IMarketCommission.AllocationStructOutput[]>;

    getCommissionSchema(
      _marketContract: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IMarketCommission.CommissionSchemaStructOutput>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTreasuryAddresses(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        _skyMavisTreasuryAddr: string;
        _axieInfinityTreasuryAddr: string;
        _roninNetworkTreasuryAddr: string;
      }
    >;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _wron: PromiseOrValue<string>,
      _wronHelper: PromiseOrValue<string>,
      _skyMavisTreasuryAddr: PromiseOrValue<string>,
      _axieInfinityTreasuryAddr: PromiseOrValue<string>,
      _roninNetworkTreasuryAddr: PromiseOrValue<string>,
      _markets: PromiseOrValue<string>[],
      _operators: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    pendingReserve(
      _addr: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recordRONIncreased(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recordReserveIncreased(
      _addr: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCommissionSchema(
      _marketContract: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _skyMavisRatio: PromiseOrValue<BigNumberish>,
      _axieInfinityRatio: PromiseOrValue<BigNumberish>,
      _roninRatio: PromiseOrValue<BigNumberish>,
      _otherCommissions: IMarketCommission.CommissionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setCutPercentages(
      _addresses: PromiseOrValue<string>[],
      _percentages: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasuryAddresses(
      _skyMavisTreasuryAddr: PromiseOrValue<string>,
      _axieInfinityTreasuryAddr: PromiseOrValue<string>,
      _roninNetworkTreasuryAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWRONConfig(
      _wron: PromiseOrValue<string>,
      _wronHelper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalReserve(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userReserve(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wronHelper(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "CommissionSchemaUpdated(address,address,tuple)"(
      marketContract?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      schema?: null
    ): CommissionSchemaUpdatedEventFilter;
    CommissionSchemaUpdated(
      marketContract?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      schema?: null
    ): CommissionSchemaUpdatedEventFilter;

    "CutPercentagesUpdated(address[],uint256[])"(
      addresses?: null,
      percentages?: null
    ): CutPercentagesUpdatedEventFilter;
    CutPercentagesUpdated(
      addresses?: null,
      percentages?: null
    ): CutPercentagesUpdatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MarketTreasuryAddressesUpdated(address,address,address)"(
      skyMavisTreasury?: PromiseOrValue<string> | null,
      axieInfinityTreasury?: PromiseOrValue<string> | null,
      roninNetworkTreasury?: PromiseOrValue<string> | null
    ): MarketTreasuryAddressesUpdatedEventFilter;
    MarketTreasuryAddressesUpdated(
      skyMavisTreasury?: PromiseOrValue<string> | null,
      axieInfinityTreasury?: PromiseOrValue<string> | null,
      roninNetworkTreasury?: PromiseOrValue<string> | null
    ): MarketTreasuryAddressesUpdatedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "TotalReserveSynced(address,uint256,uint256)"(
      token?: null,
      oldReserve?: null,
      newReserve?: null
    ): TotalReserveSyncedEventFilter;
    TotalReserveSynced(
      token?: null,
      oldReserve?: null,
      newReserve?: null
    ): TotalReserveSyncedEventFilter;

    "UserReserveClaimed(address,address,uint256)"(
      addr?: null,
      token?: null,
      amount?: null
    ): UserReserveClaimedEventFilter;
    UserReserveClaimed(
      addr?: null,
      token?: null,
      amount?: null
    ): UserReserveClaimedEventFilter;

    "UserReserveUpdated(address,address,uint256)"(
      addr?: null,
      token?: null,
      amount?: null
    ): UserReserveUpdatedEventFilter;
    UserReserveUpdated(
      addr?: null,
      token?: null,
      amount?: null
    ): UserReserveUpdatedEventFilter;

    "WRONConfigUpdated(address,address)"(
      arg0?: null,
      arg1?: null
    ): WRONConfigUpdatedEventFilter;
    WRONConfigUpdated(arg0?: null, arg1?: null): WRONConfigUpdatedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MARKET_CONTRACT_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    WRON(overrides?: CallOverrides): Promise<BigNumber>;

    claimPendingReserve(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimPendingReserveFor(
      _addr: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    clearCutPercentages(
      _addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cutPercentage(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllocations(
      _marketContract: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _total: PromiseOrValue<BigNumberish>,
      _seller: PromiseOrValue<string>,
      _referralAddr: PromiseOrValue<string>,
      _autoTransferReferralReward: PromiseOrValue<boolean>,
      _referralFeature: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCommissionSchema(
      _marketContract: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTreasuryAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _wron: PromiseOrValue<string>,
      _wronHelper: PromiseOrValue<string>,
      _skyMavisTreasuryAddr: PromiseOrValue<string>,
      _axieInfinityTreasuryAddr: PromiseOrValue<string>,
      _roninNetworkTreasuryAddr: PromiseOrValue<string>,
      _markets: PromiseOrValue<string>[],
      _operators: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pendingReserve(
      _addr: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recordRONIncreased(
      _addr: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    recordReserveIncreased(
      _addr: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCommissionSchema(
      _marketContract: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _skyMavisRatio: PromiseOrValue<BigNumberish>,
      _axieInfinityRatio: PromiseOrValue<BigNumberish>,
      _roninRatio: PromiseOrValue<BigNumberish>,
      _otherCommissions: IMarketCommission.CommissionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCutPercentages(
      _addresses: PromiseOrValue<string>[],
      _percentages: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTreasuryAddresses(
      _skyMavisTreasuryAddr: PromiseOrValue<string>,
      _axieInfinityTreasuryAddr: PromiseOrValue<string>,
      _roninNetworkTreasuryAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWRONConfig(
      _wron: PromiseOrValue<string>,
      _wronHelper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalReserve(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userReserve(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wronHelper(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MARKET_CONTRACT_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_PERCENTAGE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WRON(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimPendingReserve(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimPendingReserveFor(
      _addr: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    clearCutPercentages(
      _addresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cutPercentage(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllocations(
      _marketContract: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _total: PromiseOrValue<BigNumberish>,
      _seller: PromiseOrValue<string>,
      _referralAddr: PromiseOrValue<string>,
      _autoTransferReferralReward: PromiseOrValue<boolean>,
      _referralFeature: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCommissionSchema(
      _marketContract: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTreasuryAddresses(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _wron: PromiseOrValue<string>,
      _wronHelper: PromiseOrValue<string>,
      _skyMavisTreasuryAddr: PromiseOrValue<string>,
      _axieInfinityTreasuryAddr: PromiseOrValue<string>,
      _roninNetworkTreasuryAddr: PromiseOrValue<string>,
      _markets: PromiseOrValue<string>[],
      _operators: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pendingReserve(
      _addr: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recordRONIncreased(
      _addr: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    recordReserveIncreased(
      _addr: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCommissionSchema(
      _marketContract: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _skyMavisRatio: PromiseOrValue<BigNumberish>,
      _axieInfinityRatio: PromiseOrValue<BigNumberish>,
      _roninRatio: PromiseOrValue<BigNumberish>,
      _otherCommissions: IMarketCommission.CommissionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCutPercentages(
      _addresses: PromiseOrValue<string>[],
      _percentages: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTreasuryAddresses(
      _skyMavisTreasuryAddr: PromiseOrValue<string>,
      _axieInfinityTreasuryAddr: PromiseOrValue<string>,
      _roninNetworkTreasuryAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWRONConfig(
      _wron: PromiseOrValue<string>,
      _wronHelper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalReserve(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userReserve(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wronHelper(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
